services:
  frontend-admin:
    build:
      context: ./frontend/admin
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=2048
    depends_on:
      - user-service
      - question-service
    container_name: frontend-admin
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped

  frontend-user:
    build:
      context: ./frontend/users/peerprep-react
      dockerfile: Dockerfile
    ports:
      - "2999:2999"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=2048
    depends_on:
      - user-service
      - question-service
    container_name: frontend-user
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    env_file: 
      - path: ./user-service/.env
    container_name: user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  question-service:
    build:
      context: ./question-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    env_file: 
      - path: ./question-service/.env
    container_name: question-service
    depends_on:
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  matching-service:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    env_file:
      - path: ./matching-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_healthy
    container_name: matching-service
    restart: unless-stopped

  collab-service:
    build:
      context: ./collab-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    env_file:
      - path: ./collab-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    container_name: collab-service
    restart: unless-stopped

  collab-y-websocket:
    build:
      context: ./collab-y-websocket
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    container_name: collab-y-websocket
    extra_hosts:
      - "host.docker.internal:host-gateway"

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"    # RabbitMQ default port
      - "15672:15672"  # Management plugin port
    container_name: rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

volumes:
  mongodb_data: 